# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_libqp', [dirname(__file__)])
        except ImportError:
            import _libqp
            return _libqp
        if fp is not None:
            try:
                _mod = imp.load_module('_libqp', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _libqp = swig_import_helper()
    del swig_import_helper
else:
    import _libqp
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def ht_string_split(*args):
  return _libqp.ht_string_split(*args)
ht_string_split = _libqp.ht_string_split
cdSuitNone = _libqp.cdSuitNone
cdSuitDiamond = _libqp.cdSuitDiamond
cdSuitClub = _libqp.cdSuitClub
cdSuitHeart = _libqp.cdSuitHeart
cdSuitSpade = _libqp.cdSuitSpade
cdSuitJoker = _libqp.cdSuitJoker
cdSuitUnknow = _libqp.cdSuitUnknow
cdRankNone = _libqp.cdRankNone
cdRankAce = _libqp.cdRankAce
cdRank2 = _libqp.cdRank2
cdRank3 = _libqp.cdRank3
cdRank4 = _libqp.cdRank4
cdRank5 = _libqp.cdRank5
cdRank6 = _libqp.cdRank6
cdRank7 = _libqp.cdRank7
cdRank8 = _libqp.cdRank8
cdRank9 = _libqp.cdRank9
cdRank10 = _libqp.cdRank10
cdRankJ = _libqp.cdRankJ
cdRankQ = _libqp.cdRankQ
cdRankK = _libqp.cdRankK
cdRankSJoker = _libqp.cdRankSJoker
cdRankBJoker = _libqp.cdRankBJoker
cdRankUnknow = _libqp.cdRankUnknow
class card_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, card_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, card_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["suit"] = _libqp.card_t_suit_set
    __swig_getmethods__["suit"] = _libqp.card_t_suit_get
    if _newclass:suit = _swig_property(_libqp.card_t_suit_get, _libqp.card_t_suit_set)
    __swig_setmethods__["rank"] = _libqp.card_t_rank_set
    __swig_getmethods__["rank"] = _libqp.card_t_rank_get
    if _newclass:rank = _swig_property(_libqp.card_t_rank_get, _libqp.card_t_rank_set)
    def __init__(self): 
        this = _libqp.new_card_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libqp.delete_card_t
    __del__ = lambda self : None;
card_t_swigregister = _libqp.card_t_swigregister
card_t_swigregister(card_t)


def card_init(*args):
  return _libqp.card_init(*args)
card_init = _libqp.card_init

def card_equal(*args):
  return _libqp.card_equal(*args)
card_equal = _libqp.card_equal

def card_encode(*args):
  return _libqp.card_encode(*args)
card_encode = _libqp.card_encode

def card_decode(*args):
  return _libqp.card_decode(*args)
card_decode = _libqp.card_decode
class hand_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hand_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hand_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _libqp.hand_t_num_set
    __swig_getmethods__["num"] = _libqp.hand_t_num_get
    if _newclass:num = _swig_property(_libqp.hand_t_num_get, _libqp.hand_t_num_set)
    __swig_setmethods__["max_size"] = _libqp.hand_t_max_size_set
    __swig_getmethods__["max_size"] = _libqp.hand_t_max_size_get
    if _newclass:max_size = _swig_property(_libqp.hand_t_max_size_get, _libqp.hand_t_max_size_set)
    __swig_setmethods__["cards"] = _libqp.hand_t_cards_set
    __swig_getmethods__["cards"] = _libqp.hand_t_cards_get
    if _newclass:cards = _swig_property(_libqp.hand_t_cards_get, _libqp.hand_t_cards_set)
    def __init__(self): 
        this = _libqp.new_hand_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libqp.delete_hand_t
    __del__ = lambda self : None;
hand_t_swigregister = _libqp.hand_t_swigregister
hand_t_swigregister(hand_t)

class hand_type(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, hand_type, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, hand_type, name)
    __repr__ = _swig_repr
    __swig_setmethods__["type"] = _libqp.hand_type_type_set
    __swig_getmethods__["type"] = _libqp.hand_type_type_get
    if _newclass:type = _swig_property(_libqp.hand_type_type_get, _libqp.hand_type_type_set)
    __swig_setmethods__["num"] = _libqp.hand_type_num_set
    __swig_getmethods__["num"] = _libqp.hand_type_num_get
    if _newclass:num = _swig_property(_libqp.hand_type_num_get, _libqp.hand_type_num_set)
    __swig_setmethods__["logic_value"] = _libqp.hand_type_logic_value_set
    __swig_getmethods__["logic_value"] = _libqp.hand_type_logic_value_get
    if _newclass:logic_value = _swig_property(_libqp.hand_type_logic_value_get, _libqp.hand_type_logic_value_set)
    def __init__(self): 
        this = _libqp.new_hand_type()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libqp.delete_hand_type
    __del__ = lambda self : None;
hand_type_swigregister = _libqp.hand_type_swigregister
hand_type_swigregister(hand_type)


def hand_new(*args):
  return _libqp.hand_new(*args)
hand_new = _libqp.hand_new

def hand_free(*args):
  return _libqp.hand_free(*args)
hand_free = _libqp.hand_free

def hand_zero(*args):
  return _libqp.hand_zero(*args)
hand_zero = _libqp.hand_zero

def hand_num(*args):
  return _libqp.hand_num(*args)
hand_num = _libqp.hand_num

def hand_clone(*args):
  return _libqp.hand_clone(*args)
hand_clone = _libqp.hand_clone

def hand_from_string(*args):
  return _libqp.hand_from_string(*args)
hand_from_string = _libqp.hand_from_string

def hand_get(*args):
  return _libqp.hand_get(*args)
hand_get = _libqp.hand_get

def hand_have(*args):
  return _libqp.hand_have(*args)
hand_have = _libqp.hand_have

def hand_push(*args):
  return _libqp.hand_push(*args)
hand_push = _libqp.hand_push

def hand_pop(*args):
  return _libqp.hand_pop(*args)
hand_pop = _libqp.hand_pop

def hand_del(*args):
  return _libqp.hand_del(*args)
hand_del = _libqp.hand_del

def hand_trim(*args):
  return _libqp.hand_trim(*args)
hand_trim = _libqp.hand_trim

def hand_print(*args):
  return _libqp.hand_print(*args)
hand_print = _libqp.hand_print

def hand_dump(*args):
  return _libqp.hand_dump(*args)
hand_dump = _libqp.hand_dump

def card_text(*args):
  return _libqp.card_text(*args)
card_text = _libqp.card_text
class deck_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, deck_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, deck_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_pack"] = _libqp.deck_t_num_pack_set
    __swig_getmethods__["num_pack"] = _libqp.deck_t_num_pack_get
    if _newclass:num_pack = _swig_property(_libqp.deck_t_num_pack_get, _libqp.deck_t_num_pack_set)
    __swig_setmethods__["have_joker"] = _libqp.deck_t_have_joker_set
    __swig_getmethods__["have_joker"] = _libqp.deck_t_have_joker_get
    if _newclass:have_joker = _swig_property(_libqp.deck_t_have_joker_get, _libqp.deck_t_have_joker_set)
    __swig_setmethods__["card_adv_id"] = _libqp.deck_t_card_adv_id_set
    __swig_getmethods__["card_adv_id"] = _libqp.deck_t_card_adv_id_get
    if _newclass:card_adv_id = _swig_property(_libqp.deck_t_card_adv_id_get, _libqp.deck_t_card_adv_id_set)
    __swig_setmethods__["deal_index"] = _libqp.deck_t_deal_index_set
    __swig_getmethods__["deal_index"] = _libqp.deck_t_deal_index_get
    if _newclass:deal_index = _swig_property(_libqp.deck_t_deal_index_get, _libqp.deck_t_deal_index_set)
    __swig_setmethods__["poker"] = _libqp.deck_t_poker_set
    __swig_getmethods__["poker"] = _libqp.deck_t_poker_get
    if _newclass:poker = _swig_property(_libqp.deck_t_poker_get, _libqp.deck_t_poker_set)
    def __init__(self): 
        this = _libqp.new_deck_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libqp.delete_deck_t
    __del__ = lambda self : None;
deck_t_swigregister = _libqp.deck_t_swigregister
deck_t_swigregister(deck_t)


def deck_new(*args):
  return _libqp.deck_new(*args)
deck_new = _libqp.deck_new

def deck_free(*args):
  return _libqp.deck_free(*args)
deck_free = _libqp.deck_free

def deck_shuffle(*args):
  return _libqp.deck_shuffle(*args)
deck_shuffle = _libqp.deck_shuffle

def deck_deal(*args):
  return _libqp.deck_deal(*args)
deck_deal = _libqp.deck_deal

def deck_get(*args):
  return _libqp.deck_get(*args)
deck_get = _libqp.deck_get

def deck_num(*args):
  return _libqp.deck_num(*args)
deck_num = _libqp.deck_num

def deck_remove(*args):
  return _libqp.deck_remove(*args)
deck_remove = _libqp.deck_remove

def deck_remove_rank(*args):
  return _libqp.deck_remove_rank(*args)
deck_remove_rank = _libqp.deck_remove_rank

def deck_remove_suit(*args):
  return _libqp.deck_remove_suit(*args)
deck_remove_suit = _libqp.deck_remove_suit
class card_player_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, card_player_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, card_player_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _libqp.card_player_t_position_set
    __swig_getmethods__["position"] = _libqp.card_player_t_position_get
    if _newclass:position = _swig_property(_libqp.card_player_t_position_get, _libqp.card_player_t_position_set)
    __swig_setmethods__["mycards"] = _libqp.card_player_t_mycards_set
    __swig_getmethods__["mycards"] = _libqp.card_player_t_mycards_get
    if _newclass:mycards = _swig_property(_libqp.card_player_t_mycards_get, _libqp.card_player_t_mycards_set)
    __swig_setmethods__["data"] = _libqp.card_player_t_data_set
    __swig_getmethods__["data"] = _libqp.card_player_t_data_get
    if _newclass:data = _swig_property(_libqp.card_player_t_data_get, _libqp.card_player_t_data_set)
    def __init__(self): 
        this = _libqp.new_card_player_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libqp.delete_card_player_t
    __del__ = lambda self : None;
card_player_t_swigregister = _libqp.card_player_t_swigregister
card_player_t_swigregister(card_player_t)


def card_player_init(*args):
  return _libqp.card_player_init(*args)
card_player_init = _libqp.card_player_init

def card_player_clear(*args):
  return _libqp.card_player_clear(*args)
card_player_clear = _libqp.card_player_clear

def card_player_reset(*args):
  return _libqp.card_player_reset(*args)
card_player_reset = _libqp.card_player_reset

def card_player_draw(*args):
  return _libqp.card_player_draw(*args)
card_player_draw = _libqp.card_player_draw

def card_player_have(*args):
  return _libqp.card_player_have(*args)
card_player_have = _libqp.card_player_have

def card_player_play(*args):
  return _libqp.card_player_play(*args)
card_player_play = _libqp.card_player_play
DDZ_MAX_PLAYER = _libqp.DDZ_MAX_PLAYER
DDZ_ERROR = _libqp.DDZ_ERROR
DDZ_SINGLE = _libqp.DDZ_SINGLE
DDZ_DOUBLE = _libqp.DDZ_DOUBLE
DDZ_THREE = _libqp.DDZ_THREE
DDZ_STRAIGHT = _libqp.DDZ_STRAIGHT
DDZ_D_STRAIGHT = _libqp.DDZ_D_STRAIGHT
DDZ_T_STRAIGHT = _libqp.DDZ_T_STRAIGHT
DDZ_THREE_P1 = _libqp.DDZ_THREE_P1
DDZ_THREE_P2 = _libqp.DDZ_THREE_P2
DDZ_FOUR_2S = _libqp.DDZ_FOUR_2S
DDZ_FOUR_2D = _libqp.DDZ_FOUR_2D
DDZ_BOMB = _libqp.DDZ_BOMB
DDZ_ATOM = _libqp.DDZ_ATOM
DDZ_GAME_END = _libqp.DDZ_GAME_END
DDZ_GAME_CALL = _libqp.DDZ_GAME_CALL
DDZ_GAME_PLAY = _libqp.DDZ_GAME_PLAY
class ddz_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ddz_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ddz_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["debug"] = _libqp.ddz_t_debug_set
    __swig_getmethods__["debug"] = _libqp.ddz_t_debug_get
    if _newclass:debug = _swig_property(_libqp.ddz_t_debug_get, _libqp.ddz_t_debug_set)
    __swig_setmethods__["deck"] = _libqp.ddz_t_deck_set
    __swig_getmethods__["deck"] = _libqp.ddz_t_deck_get
    if _newclass:deck = _swig_property(_libqp.ddz_t_deck_get, _libqp.ddz_t_deck_set)
    __swig_setmethods__["game_state"] = _libqp.ddz_t_game_state_set
    __swig_getmethods__["game_state"] = _libqp.ddz_t_game_state_get
    if _newclass:game_state = _swig_property(_libqp.ddz_t_game_state_get, _libqp.ddz_t_game_state_set)
    __swig_setmethods__["turn_time"] = _libqp.ddz_t_turn_time_set
    __swig_getmethods__["turn_time"] = _libqp.ddz_t_turn_time_get
    if _newclass:turn_time = _swig_property(_libqp.ddz_t_turn_time_get, _libqp.ddz_t_turn_time_set)
    __swig_setmethods__["curr_turn_time"] = _libqp.ddz_t_curr_turn_time_set
    __swig_getmethods__["curr_turn_time"] = _libqp.ddz_t_curr_turn_time_get
    if _newclass:curr_turn_time = _swig_property(_libqp.ddz_t_curr_turn_time_get, _libqp.ddz_t_curr_turn_time_set)
    __swig_setmethods__["round"] = _libqp.ddz_t_round_set
    __swig_getmethods__["round"] = _libqp.ddz_t_round_get
    if _newclass:round = _swig_property(_libqp.ddz_t_round_get, _libqp.ddz_t_round_set)
    __swig_setmethods__["inning"] = _libqp.ddz_t_inning_set
    __swig_getmethods__["inning"] = _libqp.ddz_t_inning_get
    if _newclass:inning = _swig_property(_libqp.ddz_t_inning_get, _libqp.ddz_t_inning_set)
    __swig_setmethods__["landlord_no"] = _libqp.ddz_t_landlord_no_set
    __swig_getmethods__["landlord_no"] = _libqp.ddz_t_landlord_no_get
    if _newclass:landlord_no = _swig_property(_libqp.ddz_t_landlord_no_get, _libqp.ddz_t_landlord_no_set)
    __swig_setmethods__["first_player_no"] = _libqp.ddz_t_first_player_no_set
    __swig_getmethods__["first_player_no"] = _libqp.ddz_t_first_player_no_get
    if _newclass:first_player_no = _swig_property(_libqp.ddz_t_first_player_no_get, _libqp.ddz_t_first_player_no_set)
    __swig_setmethods__["curr_player_no"] = _libqp.ddz_t_curr_player_no_set
    __swig_getmethods__["curr_player_no"] = _libqp.ddz_t_curr_player_no_get
    if _newclass:curr_player_no = _swig_property(_libqp.ddz_t_curr_player_no_get, _libqp.ddz_t_curr_player_no_set)
    __swig_setmethods__["largest_player_no"] = _libqp.ddz_t_largest_player_no_set
    __swig_getmethods__["largest_player_no"] = _libqp.ddz_t_largest_player_no_get
    if _newclass:largest_player_no = _swig_property(_libqp.ddz_t_largest_player_no_get, _libqp.ddz_t_largest_player_no_set)
    __swig_setmethods__["last_hand"] = _libqp.ddz_t_last_hand_set
    __swig_getmethods__["last_hand"] = _libqp.ddz_t_last_hand_get
    if _newclass:last_hand = _swig_property(_libqp.ddz_t_last_hand_get, _libqp.ddz_t_last_hand_set)
    __swig_setmethods__["last_htype"] = _libqp.ddz_t_last_htype_set
    __swig_getmethods__["last_htype"] = _libqp.ddz_t_last_htype_get
    if _newclass:last_htype = _swig_property(_libqp.ddz_t_last_htype_get, _libqp.ddz_t_last_htype_set)
    __swig_setmethods__["di"] = _libqp.ddz_t_di_set
    __swig_getmethods__["di"] = _libqp.ddz_t_di_get
    if _newclass:di = _swig_property(_libqp.ddz_t_di_get, _libqp.ddz_t_di_set)
    __swig_setmethods__["call"] = _libqp.ddz_t_call_set
    __swig_getmethods__["call"] = _libqp.ddz_t_call_get
    if _newclass:call = _swig_property(_libqp.ddz_t_call_get, _libqp.ddz_t_call_set)
    __swig_setmethods__["players"] = _libqp.ddz_t_players_set
    __swig_getmethods__["players"] = _libqp.ddz_t_players_get
    if _newclass:players = _swig_property(_libqp.ddz_t_players_get, _libqp.ddz_t_players_set)
    def __init__(self): 
        this = _libqp.new_ddz_t()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _libqp.delete_ddz_t
    __del__ = lambda self : None;
ddz_t_swigregister = _libqp.ddz_t_swigregister
ddz_t_swigregister(ddz_t)


def ddz_new():
  return _libqp.ddz_new()
ddz_new = _libqp.ddz_new

def ddz_free(*args):
  return _libqp.ddz_free(*args)
ddz_free = _libqp.ddz_free

def ddz_start(*args):
  return _libqp.ddz_start(*args)
ddz_start = _libqp.ddz_start

def ddz_get_state(*args):
  return _libqp.ddz_get_state(*args)
ddz_get_state = _libqp.ddz_get_state

def ddz_set_state(*args):
  return _libqp.ddz_set_state(*args)
ddz_set_state = _libqp.ddz_set_state

def ddz_htype_name(*args):
  return _libqp.ddz_htype_name(*args)
ddz_htype_name = _libqp.ddz_htype_name

def ddz_sort(*args):
  return _libqp.ddz_sort(*args)
ddz_sort = _libqp.ddz_sort

def ddz_handtype(*args):
  return _libqp.ddz_handtype(*args)
ddz_handtype = _libqp.ddz_handtype

def ddz_play(*args):
  return _libqp.ddz_play(*args)
ddz_play = _libqp.ddz_play

def ddz_canplay(*args):
  return _libqp.ddz_canplay(*args)
ddz_canplay = _libqp.ddz_canplay

def ddz_next_player(*args):
  return _libqp.ddz_next_player(*args)
ddz_next_player = _libqp.ddz_next_player

def ddz_call(*args):
  return _libqp.ddz_call(*args)
ddz_call = _libqp.ddz_call

def ddz_pass(*args):
  return _libqp.ddz_pass(*args)
ddz_pass = _libqp.ddz_pass

def ddz_dump(*args):
  return _libqp.ddz_dump(*args)
ddz_dump = _libqp.ddz_dump
# This file is compatible with both classic and new-style classes.


